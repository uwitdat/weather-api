{"version":3,"sources":["components/Weather.js","components/DropDown.js","App.js","index.js"],"names":["Weather","weather","Object","keys","length","map","obj","className","name","main","temp","src","icon","alt","id","BootstrapInput","withStyles","theme","root","marginTop","spacing","input","borderRadius","position","backgroundColor","palette","background","paper","border","fontSize","width","padding","transition","transitions","create","fontFamily","join","borderColor","boxShadow","InputBase","useStyles","makeStyles","margin","DropDown","handleOnChange","capCityArray","city","cityError","classes","FormControl","InputLabel","Select","labelId","onChange","MenuItem","style","color","borderTop","value","App","useState","setWeather","countries","setCountries","setCapCityArray","setCity","setCityError","useEffect","newArr","forEach","country","push","capital","sort","filter","getValues","a","axios","get","process","res","data","console","log","message","fetchWeather","fetchCitites","e","target","require","config","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d3dc91a.chunk.js","sourcesContent":["const Weather = ({ weather }) => {\n    return (\n        <>\n            {Object.keys(weather).length === 0 ? (\n                <h3>Pick a city to display the weather</h3>\n            ) : (\n                weather.weather?.map((obj) => (\n                    <div className=\"weather-container\" key={obj.id}>\n                        <h3>{weather.name}</h3>\n                        <h4>{obj.main}</h4>\n                        <h4 className=\"temp\">\n                            {weather.main.temp}\n                            <span>&deg;</span>\n                        </h4>\n\n                        <img\n                            className=\"weather-icon\"\n                            src={`https://openweathermap.org/img/wn/${obj.icon}@2x.png`}\n                            alt=\"weather icons\"\n                        ></img>\n                    </div>\n                ))\n            )}\n        </>\n    );\n};\n\nexport default Weather;","import InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\n\nconst BootstrapInput = withStyles((theme) => ({\n    root: {\n        \"label + &\": {\n            marginTop: theme.spacing(3)\n        }\n    },\n    input: {\n        borderRadius: 4,\n        position: \"relative\",\n        backgroundColor: theme.palette.background.paper,\n        border: \"1px solid black\",\n        fontSize: 16,\n        width: \"50vw\",\n        padding: \"10px 26px 10px 12px\",\n        transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\n        // Use the system font instead of the default Roboto font.\n        fontFamily: [\n            \"-apple-system\",\n            \"BlinkMacSystemFont\",\n            '\"Segoe UI\"',\n            \"Roboto\",\n            '\"Helvetica Neue\"',\n            \"Arial\",\n            \"sans-serif\",\n            '\"Apple Color Emoji\"',\n            '\"Segoe UI Emoji\"',\n            '\"Segoe UI Symbol\"'\n        ].join(\",\"),\n        \"&:focus\": {\n            borderRadius: 4,\n            backgroundColor: theme.palette.background.paper,\n            borderColor: \"#80bdff\",\n            boxShadow: \"0 0 0 0.2rem rgba(0,123,255,.25)\"\n        }\n    }\n}))(InputBase);\n\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n        margin: theme.spacing(1)\n    }\n}));\n\nconst DropDown = ({ handleOnChange, capCityArray, city, cityError }) => {\n    const classes = useStyles();\n\n    return (\n        <div className=\"form-container\">\n            <FormControl className={classes.margin}>\n                <InputLabel id=\"demo-customized-select-label\">Select a City</InputLabel>\n                <Select\n                    labelId=\"demo-customized-select-label\"\n                    id=\"demo-customized-select\"\n                    onChange={handleOnChange}\n                    input={<BootstrapInput />}\n                >\n                    {capCityArray?.map((city) => (\n                        <MenuItem\n                            className=\"menu-item-drop\"\n                            style={{\n                                backgroundColor: \"rgb(39, 39, 39)\",\n                                color: \"rgb(236, 236, 236)\",\n                                fontFamily: \"Darker Grotesque\",\n                                fontSize: \"1.3rem\",\n                                borderTop: \"0.5px solid rgba(236, 236, 236, 0.055)\"\n                            }}\n                            value={city}\n                        >\n                            {city}\n                        </MenuItem>\n                    ))}\n                </Select>\n            </FormControl>\n            {cityError ? (\n                <h2 id=\"err\">\n                    No weather information is available for:{\" \"}\n                    <span id=\"city-err\">{city},</span> <br />\n                    Please select another City\n                </h2>\n            ) : null}\n        </div>\n    );\n};\n\nexport default DropDown;\n","import \"./styles.css\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport React from \"react\";\nimport Weather from \"./components/Weather\";\nimport DropDown from \"./components/DropDown\";\nrequire('dotenv').config()\n\nexport default function App() {\n  const [weather, setWeather] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [capCityArray, setCapCityArray] = useState([]);\n  const [city, setCity] = useState(\"Toronto\");\n  const [cityError, setCityError] = useState(false);\n\n  //.capital_city in country obj is originally only sorted by name\n  //getValues() creates a new array alphabetically sorted by capital city\n  //the return from getValues() is set to capCityArray and mapped over below in JSX\n  useEffect(() => {\n    const getValues = () => {\n      const newArr = [];\n      if (countries.length > 0) {\n        countries.forEach((country) => newArr.push(country.capital));\n      }\n      return newArr.sort().filter((obj) => obj !== \"\");\n    };\n    setCapCityArray(getValues());\n  }, [countries]);\n\n  useEffect(() => {\n    const fetchWeather = async () => {\n      if (city !== \"\") {\n        try {\n          const res = await axios.get(\n            `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${process.env.REACT_APP_API_KEY}`\n          );\n          setCityError(false);\n          setWeather(res.data);\n        } catch (err) {\n          console.log(\"ERR\", err.message);\n          setCityError(true);\n        }\n      }\n    };\n    fetchWeather();\n  }, [city]);\n\n  useEffect(() => {\n    const fetchCitites = async () => {\n      try {\n        const res = await axios.get(\"https://restcountries.eu/rest/v2/all\");\n        setCountries(res.data);\n      } catch (err) {\n        setCityError(true);\n        console.log(\"ERR\", err.message);\n      }\n    };\n    fetchCitites();\n  }, []);\n\n  const handleOnChange = (e) => {\n    setCity(e.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <Weather weather={weather} />\n\n      <DropDown\n        handleOnChange={handleOnChange}\n        capCityArray={capCityArray}\n        city={city}\n        cityError={cityError}\n      />\n    </div>\n  );\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}